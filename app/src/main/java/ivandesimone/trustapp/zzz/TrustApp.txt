Un'applicazione per visualizzare dati di monitroaggio ambientale o strutturale (eventi critici di ponti).
In questo caso andremo ad utilizzare dati di aziende vinicole, in particolare un dato di umidità del terreno.

I dati vengono richiesti alla chain, ed una volta ricevuti sono salvati e mostrati nell'app.
Mostrare un selettore di chain per effettuare la richiesta, magari in base al costo delle transazioni.
Gli SC sono uguali su più chain (eth sepolia, bsc e polygon), ideale avere un wallet con più account.
Dall'app connessione allo sc, chiamare la funzione di submit request passando la query da eseguire,
poi recuperare i dati ricevuti, salvare i dati ricevuti nel db e poi visualizzarli opportunamente.
il ledger è il db dello smart contract

Si potrebbe aggiungere un task in background che monitora i dati che arrivano sullo smart contract,
eventualmente richiesti da altri utenti per monitorare con una notifica ???


DATI DA MARCO:

export interface InputRequest {
    query: string;
    chainParams: ChainParams;
    ko: number;
    ki: number;
    fee: number;
}
export interface ChainParams {
    w1: number;
    w2: number;
    w3: number;
    w4: number;
}

La somma dei w_i deve essere sempre 100 -> metterli tutti e quattro a 25. ko e ki metterli a 1 in modo che funzioni anche con un solo oracle.
Quello che bisogna strutturare è la query per richiedere il sensore con annesse le coordinate.
Fee non è rilevante, tanto viene sempre èrelevata la quantità minima

--------------------------------------

/** Examples */
/**
* Query 1
* {
*   "topic": "s4agri:AmbientHumidity",
*   "geo": {
*     "type": "Feature",
*     "geometry": {
*       "type": "Point",
*       "coordinates": [44.4948, 11.3426]
*     },
*     "properties": {
*        // meters
*       "radius": 500
*     }
*   }
* }
* }
*
* Query 2
* {
*   "topic": "saref:Temperature",
*   "geo": {
*     "type": "Feature",
*     "geometry": {
*       "type": "Point",
*       "coordinates": [11.5820, 48.1351]
*     },
*     "properties": {
*        // meters
*       "radius": 1000
*     }
*   }
* }
*/
